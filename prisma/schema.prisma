generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String?  @unique
  phone     String   @unique
  password  String   @db.VarChar(256)
  avatar    String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Roles   UserRole[]
  profile Profile?

  @@map(name: "users")
}

// 用户个人设置
model Profile {
  id Int @id @default(autoincrement())

  // light | dark
  mode String @default("light")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map(name: "profile")
}

model Role {
  id          Int              @id @default(autoincrement())
  Pid         Int              @map("pid")
  Title       String           @map("title")
  createdAt   DateTime         @default(now()) @map(name: "created_at")
  updatedAt   DateTime         @updatedAt @map(name: "updated_at")
  users       UserRole[]
  permissions RolePermission[]

  @@map(name: "role")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  // 继承那个父权限
  parent      Permission?      @relation("ChildPermission", fields: [parentId], references: [id])
  parentId    Int?
  // 被哪些权限继承
  children    Permission[]     @relation("ChildPermission")
  // 被哪些角色拥有
  roles       RolePermission[]
  apis        Api[]
  menus       Menu[]

  @@map(name: "permission")
}

// menu 为后端左侧菜单栏 一般为pages/admin为主 例子:
// |--admin/index -> path: admin/
// |--admin/user -> path: admin/user
// |--admin/user/index -> path: admin/user
// |--admin/user/about -> path: admin/user/about
// index 为默认，可以忽略
// 需要从 admin 触发
model Menu {
  id  Int @id @default(autoincrement())
  // 父路径id
  pid Int

  title       String?
  icon        String?
  description String?
  path        String

  Permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId Int?        @map("permission_id")

  @@map(name: "menu")
}

model Api {
  id          Int     @id @default(autoincrement())
  description String?
  path        String

  // http 请求的方法集合 GET 、 POST 、 PUT 、 PATCH 、 DELETE 、 HEAD 和 OPTIONS. * 表示全通过
  method       Json
  Permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId Int?        @map("permission_id")

  @@map(name: "api")
}

// 关联表 关联用户和角色
model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int    @map("role_id")

  @@id([userId, roleId])
  @@map(name: "user_role")
}

// 关联表 关联角色和权限
model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int        @map("role_id")
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int        @map("permission_id")

  @@id([roleId, permissionId])
  @@map(name: "role_permission")
}

// 用于存储验证码的表 如果有 redis 可以放在 redis 
model Captcha {
  id             String   @id @db.Char(36)
  // 验证码的字
  value          String
  // 验证码的图形 svg 格式
  data           String   @db.Text
  //  过期时间
  expirationTime DateTime @map(name: "expiration_time") @db.Timestamp()
  // 创建时间
  createdAt      DateTime @default(now()) @map(name: "created_at")

  isUse Boolean @default(false)

  @@map(name: "captcha")
}
